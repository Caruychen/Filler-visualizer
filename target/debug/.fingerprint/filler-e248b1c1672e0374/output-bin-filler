{"message":"`main` function not found in crate `filler`","code":{"code":"E0601","explanation":"No `main` function was found in a binary crate.\n\nTo fix this error, add a `main` function:\n\n```\nfn main() {\n    // Your program will start here.\n    println!(\"Hello world!\");\n}\n```\n\nIf you don't know the basics of Rust, you can look at the\n[Rust Book][rust-book] to get started.\n\n[rust-book]: https://doc.rust-lang.org/book/\n"},"level":"error","spans":[{"file_name":"src/bin/filler.rs","byte_start":0,"byte_end":1240,"line_start":1,"line_end":41,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"mod filler {","highlight_start":1,"highlight_end":13},{"text":"    use std::process::{Command, Stdio};","highlight_start":1,"highlight_end":40},{"text":"    use json;","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub struct Filler {","highlight_start":1,"highlight_end":24},{"text":"        pub replay: String","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    impl Filler {","highlight_start":1,"highlight_end":18},{"text":"        fn call_cmd(filler: &str, args: &mut [&str]) -> String {","highlight_start":1,"highlight_end":65},{"text":"            let output = Command::new(filler)","highlight_start":1,"highlight_end":46},{"text":"                .args(args)","highlight_start":1,"highlight_end":28},{"text":"                .stdout(Stdio::piped())","highlight_start":1,"highlight_end":40},{"text":"                .output()","highlight_start":1,"highlight_end":26},{"text":"                .unwrap();","highlight_start":1,"highlight_end":27},{"text":"            let stdout = String::from_utf8(output.stdout).unwrap();","highlight_start":1,"highlight_end":68},{"text":"            stdout","highlight_start":1,"highlight_end":19},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub fn run(filler: &str, args: &mut [&str]) -> Filler {","highlight_start":1,"highlight_end":64},{"text":"            let stdout = Filler::call_cmd(filler, args);","highlight_start":1,"highlight_end":57},{"text":"            let mut data = vec![];","highlight_start":1,"highlight_end":35},{"text":"            let mut index = 0;","highlight_start":1,"highlight_end":31},{"text":"            let mut is_begun = false;","highlight_start":1,"highlight_end":38},{"text":"            for line in stdout.split(\"\\n\") {","highlight_start":1,"highlight_end":45},{"text":"                let is_mapln = line.chars().count() > 3 && (&line[..3]).parse::<f64>().is_ok();","highlight_start":1,"highlight_end":96},{"text":"                if line.starts_with(\"Plateau\") {","highlight_start":1,"highlight_end":49},{"text":"                    data.push(vec![]);","highlight_start":1,"highlight_end":39},{"text":"                    index += 1;","highlight_start":1,"highlight_end":32},{"text":"                    is_begun = true;","highlight_start":1,"highlight_end":37},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                else if is_begun && is_mapln {","highlight_start":1,"highlight_end":47},{"text":"                    data[index - 1].push(&line[4..]);","highlight_start":1,"highlight_end":54},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        let mut replay = json::stringify(data);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        Filler { replay }","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"consider adding a `main` function to `src/bin/filler.rs`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0601]\u001b[0m\u001b[0m\u001b[1m: `main` function not found in crate `filler`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/filler.rs:1:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mmod filler {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use std::process::{Command, Stdio};\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use json;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mconsider adding a `main` function to `src/bin/filler.rs`\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to previous error\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0601`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0601`.\u001b[0m\n"}
